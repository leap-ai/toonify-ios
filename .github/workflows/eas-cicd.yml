name: Toonify iOS EAS build - CI

on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened] # Trigger on PR creation, updates, and reopening
  push:
    branches:
      - main

jobs:
  development_build:
    name: Development Build
    if: github.event_name == 'pull_request' # Only run this job for pull request events
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed for checkout
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x # Or your preferred LTS version

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          package-manager: bun
          packager: bun

      - name: Install dependencies
        run: bun install --frozen-lockfile # Use --frozen-lockfile for reproducible builds

      - name: Create iOS Development Build
        run: eas build -p ios --profile development --non-interactive --no-wait
        # Ensure you have a 'development' profile in eas.json configured for iOS development builds.
        # Example eas.json development profile for iOS:
        # "development": {
        #   "developmentClient": true,
        #   "distribution": "internal",
        #   "ios": {
        #     "simulator": false 
        #   }
        # }

  production_build_and_submit:
    name: Create Production Build and Submit to TestFlight (iOS)
    if: (github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write      # To commit version bump
      pull-requests: read  # To read PR labels
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install project dependencies (including semver)
        run: bun install --frozen-lockfile 

      - name: Setup Git User
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install jq (for commit message version reading)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Bump version based on PR labels or push
        id: version_bumper
        # The script is in scripts/bump-version.js
        # bun run is executed from workspace root, script path is relative to root
        run: bun run ./scripts/bump-version.js 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GITHUB_EVENT_PATH and GITHUB_EVENT_NAME are default
      
      - name: Commit and Push version bump
        run: |
          echo "Attempting to commit version bump..."
          # The script modifies ./app.json
          git add ./app.json
          
          if git diff --staged --quiet; then
            echo "No version change detected in app.json by the script. Skipping commit."
          else
            # Re-read version directly from file for the commit message as script output might not be easily captured for this specific use
            NEW_VERSION=$(cat ./app.json | jq -r .expo.version)
            echo "New version from app.json for commit: $NEW_VERSION"
            
            COMMIT_MESSAGE="chore(version): bump to $NEW_VERSION for ${{ github.event_name }} event [skip ci]"
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              COMMIT_MESSAGE="chore(version): bump to $NEW_VERSION for PR #${{ github.event.pull_request.number }} [skip ci]"
            fi
            
            git commit -m "$COMMIT_MESSAGE"
            
            TARGET_BRANCH="${{ github.event.pull_request.base.ref || github.ref_name }}"
            echo "Pushing version bump to $TARGET_BRANCH"
            git push origin "HEAD:$TARGET_BRANCH"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}
          packager: bun
      
      # The main 'bun install' for the project has already run.
      # If EAS build itself needs a specific environment that re-install implies, it can be kept.
      # For now, assuming the initial install is sufficient.

      - name: Create iOS Production Build
        run: eas build -p ios --profile production --non-interactive --wait

      - name: Submit iOS Production Build to TestFlight
        run: eas submit -p ios --profile production --latest --non-interactive
        # This command submits the latest build for the 'production' profile.
        # Ensure your eas.json 'production' profile's submit section is configured for TestFlight.
        # Example eas.json production profile for iOS with submit configuration:
        # "production": {
        #   "distribution": "store",
        #   "ios": {
        #      "enterpriseProvisioning": "adhoc" // or "universal" depending on your setup for TestFlight
        #   },
        #   "submit": {
        #     "production": { // This key matches the eas submit --profile <name>
        #       "ios": {
        #         "appleId": "your-apple-id@example.com", // Store in secrets if sensitive
        #         "ascAppId": "your-app-specific-id",    // Store in secrets if sensitive
        #         "appleTeamId": "${{ secrets.EXPO_APPLE_TEAM_ID }}" // Can also be a secret
        #       }
        #     }
        #   }
        # }
        # Note: For EAS Submit, if you use app-specific passwords or API keys for Apple,
        # ensure they are correctly configured in your EAS project settings or via environment variables/secrets. 